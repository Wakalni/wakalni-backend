services:
  postgres:
    image: postgres:16-alpine
    container_name: caravan-postgres
    environment:
      - POSTGRES_HOST=${DB_HOST}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - caravan_postgres_data:/var/lib/postgresql/data
    networks:
      - caravan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME} -p ${DB_PORT}"]
      interval: 3s
      timeout: 3s
      retries: 2
      start_period: 5s

  backend:
    build: .
    container_name: caravan-backend
    env_file:
      - .env
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - caravan_backend_logs:/usr/src/app/logs
      - /usr/src/app/node_modules
    networks:
      - caravan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -v http://localhost:${PORT}/api/v${API_VERSION}/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 2
      start_period: 10s

  nginx:
    build:
      context: ./nginx
    container_name: caravan-nginx
    depends_on:
      backend:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - CORS_ORIGINS=${CORS_ORIGINS}
      - CORS_METHODS=${CORS_METHODS}
      - CORS_ALLOWED_HEADERS=${CORS_ALLOWED_HEADERS}
      - CORS_EXPOSED_HEADERS=${CORS_EXPOSED_HEADERS}
      - CORS_CREDENTIALS=${CORS_CREDENTIALS}
      - CORS_MAX_AGE=${CORS_MAX_AGE}
    ports:
      - "8080:80"
      - "443:443"
    volumes:
      - caravan_nginx_logs:/var/log/nginx
      - ./nginx/nginx.conf.template:/etc/nginx/templates/nginx.conf.template:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - caravan-network
    restart: unless-stopped

volumes:
  caravan_postgres_data:
  caravan_backend_logs:
  caravan_nginx_logs:

networks:
  caravan-network:
    driver: bridge